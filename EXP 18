import itertools

def tsp_bruteforce(dist_matrix):
    n = len(dist_matrix)
    cities = list(range(n))
    min_path = None
    min_cost = float('inf')

    for perm in itertools.permutations(cities[1:]):  # fix city 0 as start
        cost = 0
        prev = 0
        for city in perm:
            cost += dist_matrix[prev][city]
            prev = city
        cost += dist_matrix[prev][0]  # return to start

        if cost < min_cost:
            min_cost = cost
            min_path = (0,) + perm + (0,)

    return min_path, min_cost

# Example distance matrix (4 cities)
dist_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

path, cost = tsp_bruteforce(dist_matrix)
print("Shortest path:", path)
print("Minimum cost:", cost)

OUTPUT:

Shortest path: (0, 1, 3, 2, 0)
Minimum cost: 80
